{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["appbaseRef","Appbase","url","app","credentials","MyAnnotation","react_default","a","createElement","es","src","this","props","data","_source","base64","annotations","file","type","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","annotation","setState","onSubmit","geometry","state","concat","objectSpread","id","Math","random","self","assertThisInitialized","search","body","query","match","name","currentFile","then","res","updateData","hits","_id","catch","err","console","log","pictures","files","isUploaded","allImages","onDrop","bind","setAllImages","picture","doc_id","update","doc","index","match_all","showImage","map","i","className","key","App_MyAnnotation","href","build_min_default","multiple","onDone","getFiles","value","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f1ab326.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Annotation from 'react-image-annotation';\nimport FileBase64 from 'react-file-base64';\nimport Appbase from 'appbase-js';\n\nvar appbaseRef = Appbase({\n\turl: \"https://scalr.api.appbase.io\",\n\tapp: \"image-annotate\",\n\tcredentials: \"eFHEtaFzz:0c388c04-ef40-443b-9944-6cfd97bb4ca0\"\n})\n\nclass MyAnnotation extends Component {\n  render() {\n    return (\n      <Annotation\n                  src={this.props.data._source.base64}\n        \n                  annotations={this.props.data._source.file}\n        \n                  type={this.props.data._source.type}\n                />\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n     this.state = { \n       pictures: [],\n       annotations: [],\n       annotation: {},\n       files: [],\n       isUploaded: false,\n       currentFile: \"\",\n       allImages: []\n      };\n     this.onDrop = this.onDrop.bind(this);\n     this.updateData = this.updateData.bind(this);\n     this.setAllImages = this.setAllImages.bind(this);\n  }\n  onDrop(picture) {\n    this.setState({\n        pictures: this.state.pictures.concat(picture),\n    });\n  }\n  onChange = (annotation) => {\n    this.setState({ annotation })\n  }\n  updateData(self, doc_id) {\n    appbaseRef.update({\n      type: \"image\",\n      id: doc_id,\n      body: {\n        doc: {\n        \"file\": self.state.annotations\n        }\n      }\n    }).then(function(res) {\n    }).catch(function(err) {\n      console.log(\"update document error: \", err)\n    })\n  }\n  onSubmit = (annotation) => {\n    const { geometry, data } = annotation\n    this.setState({\n      annotation: {},\n      annotations: this.state.annotations.concat({\n        geometry,\n        data: {\n          ...data,\n          id: Math.random()\n        }\n      })\n    })\n    var self = this\n    appbaseRef.search({\n      type: \"image\",\n      body: {\n        query: {\n          match: {\"name\": self.state.currentFile}\n        }\n      }\n    }).then(function(res) {\n      self.updateData(self, res.hits.hits[0]._id)\n    }).catch(function(err) {\n      console.log(\"search error: \", err)\n    })\n  }\n\n  getFiles(files){\n    this.setState({ files: files, isUploaded: true, currentFile: files[0].file.name });\n    appbaseRef.index({\n      type: \"image\",\n      body: this.state.files,\n    }).then(function(res) {\n      \n    }).catch(function(err) {\n      console.log(\"indexing error: \", err)\n    })\n\n  }\n\n  setAllImages(self) {\n    appbaseRef.search({\n      type: \"image\",\n      body: {\n        query: {\n          match_all: {}\n        }\n      }\n    }).then(function(res) {\n      self.setState({allImages: self.state.allImages.concat(res.hits.hits)})\n    }).catch(function(err) {\n      console.log(\"search error: \", err)\n    })\n  }\n  componentDidMount() {\n\n    this.setAllImages(this)\n    \n  }\n  render() {\n    var showImage = this.state.allImages.map((data, i) => {\n      return (\n        <div className=\"two-box\" key={i}><MyAnnotation data={data}></MyAnnotation></div>\n      )\n    })\n    return (\n        <div>\n          <nav className=\"navbar navbar-default\">\n            <div className=\"container-fluid\">\n              <div className=\"navbar-header\">\n                <a className=\"navbar-brand\" href=\"https://github.com/tarangdave/image-annotation-tool\">Image Annotation Tool</a>\n              </div>\n            </div>\n          </nav>\n          <div className=\"container\">\n              <div className=\"col-lg-12 col-sm-12 col-md-12 col-xs-12\">\n                <div className=\"col-lg-3 col-md-3 col-sm-3 col-xs-12\">\n                  <div className=\"col-lg-12 col-sm-12 col-xs-12 col-md-12\"><FileBase64\n                    multiple={ true }\n                    onDone={ this.getFiles.bind(this) } /></div>\n                </div>\n              </div>\n              <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                  {this.state.isUploaded ? <div className=\"col-lg-12 col-sm-12 col-xs-12 col-md-12 two-box\"><Annotation\n                    src={this.state.files[0].base64}\n          \n                    annotations={this.state.annotations}\n          \n                    type={this.state.type}\n                    value={this.state.annotation}\n                    onChange={this.onChange}\n                    onSubmit={this.onSubmit}\n                  /></div> : <div className=\"col-lg-12 col-sm-12 col-xs-12 col-md-12 two-box\">Please Upload less than 1MB image to annotate</div>}\n              </div>\n              <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <h1>Previous Images</h1>\n              </div>\n              <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    {showImage}\n              </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}